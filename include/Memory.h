//=====================================================================
// Memory.h 
// 内存分配器
// 柯达昭
// 2010-07-26
//=======================================================================

#ifndef _XMEMORY_MEMORY_H_
#define _XMEMORY_MEMORY_H_
#include <stdint.h>

namespace XMemory
{
	#define VIRTUAL_PAGE_READ		0x01
	#define VIRTUAL_PAGE_WRITE		0x02
	#define VIRTUAL_PAGE_EXECUTE	0x04

	//========================================================================
	// 获取内存页大小
	//========================================================================
	uint32_t GetVirtualPageSize();

	//========================================================================
	// 保留一段内存
	//========================================================================
	void* ReserveMemoryPage( void* pAddress, size_t nSize );

	//========================================================================
	// 释放保留区域保留一段内存
	//========================================================================
	bool FreeMemoryPage( void* pAddress, size_t nSize );

	//========================================================================
	// 提交一段内存
	//========================================================================
	bool CommitMemoryPage( void* pAddress, size_t nSize, uint32_t nProtectFlag );

	//========================================================================
	// 取消提交的一段内存
	//========================================================================
	bool DecommitMemoryPage( void* pAddress, size_t nSize );

	//========================================================================
	// 分配被管理的内存 
	//========================================================================
	void* Alloc( size_t nSize, void* pCallAddress = NULL );

	//========================================================================
	// 释放被管理的内存 
	//========================================================================
	void  Free( void* );

	//========================================================================
	// 被管理的已分配内存大小
	//========================================================================
	uint64_t  GetTotalAllocSize();

	//========================================================================
	// 被管理的内存总大小
	//========================================================================
	uint64_t  GetTotalMgrSize();

	//========================================================================
	// 被管理的空闲内存大小
	//========================================================================
	uint64_t  GetFreeMgrSize();

	//========================================================================
	// 得到在pAddress处分配的总内存数量
	//========================================================================
	uint32_t  GetAllocStack( uint32_t nIndex, void**& pAddress, uint32_t& nAllocSize );

	//========================================================================
	// Dump内存信息
	//========================================================================
	void    DumpMemoryInfo();

	//========================================================================
	// 页分配器
	//========================================================================
	template< uint32_t nPageSize = 8192, uint32_t nFlag = VIRTUAL_PAGE_READ|VIRTUAL_PAGE_WRITE >
	class TFixedPageAlloc
	{
	public:
		enum { ePageSize = nPageSize, eMemoryType = nFlag };
		static void* Alloc() 
		{ 
			void* pBuffer = ReserveMemoryPage( NULL, ePageSize );
			CommitMemoryPage( pBuffer, ePageSize, eMemoryType );
			return pBuffer;
		}

		static void Free( void* p ) 
		{ 
			DecommitMemoryPage( p, ePageSize );
			FreeMemoryPage( p, ePageSize );
		};
	};
}

#endif
